@page "/"
@using BlazorTODO.Services

<div class="card">
    <div class="card-header">
        BLAZOR TODO LIST with Syncfusion
    </div>
    <div class="card-body">

        <_AddNewTodo AddTodoHandler="AddTodo"></_AddNewTodo>

        <br /><br />

        @foreach (var todo in TodosFiltered)
        {
            <_TodoItem todo="todo"
                       UpdateCompletedHandler="UpdateCompleted"
                       UpdateTodoHandler="UpdateTodo"
                       DeleteTodoHandler="DeleteTodo">
            </_TodoItem>
        }

    </div>

    <div class="card-footer">
        <div class="row mb-4">
            <div class="col-sm-8">
                <EjsCheckBox Label="Check All" @bind-Checked="@checkAll" @onchange="CheckAll"></EjsCheckBox>
            </div>
            <div class="col-sm-4">
                <_RemaingTodosCount RemaingTodos="@RemaingTodos()"></_RemaingTodosCount>
            </div>
        </div>
        <hr />
        <div class="row mb-4">
            <div class="col-sm-8">
                <_FilterTodo FilterTodoHandler="FilterTodo"></_FilterTodo>
            </div>

            @if (RemaingTodos() < Todos.Count)
            {
                <div class="col-sm-4">
                    <_ClearCompletedTodo ClearCompletedHandler="ClearCompleted"></_ClearCompletedTodo>
                </div>
            }

        </div>
    </div>

</div>


@code
{
    private TodoRepo todoRepo;

    private List<Todo> Todos;
    private List<Todo> TodosFiltered;

    private string newTodo { get; set; }
    private bool checkAll { get; set; } = false;

    protected override void OnInitialized()
    {
        todoRepo = new TodoRepo();
        InitFilterTodos();

    }

    private void InitFilterTodos()
    {
        Todos = todoRepo.GetTodo().ToList();
        TodosFiltered = Todos;
    }


    private void AddTodo(string newTodo) {
        if (!string.IsNullOrEmpty(newTodo))
        {
            todoRepo.AddTodo(newTodo);
            InitFilterTodos();
        }
    }

    private void DeleteTodo(Todo todo)
    {
        todoRepo.DeleteTodo(todo);
        InitFilterTodos();
    }

    private void UpdateTodo(Todo todo)
    {
        if (!string.IsNullOrEmpty(todo.NewTitle)) {
            todo.Title = todo.NewTitle;
            todo.Editing = false;
            todoRepo.UpdateTodo(todo);
            InitFilterTodos();
        }

    }

    private void UpdateCompleted(Todo todo)
    {
        todoRepo.UpdateTodo(todo);
        checkAll = todoRepo.CountRemainingTodos() == 0 ? true : false;
        InitFilterTodos();
    }

    private void FilterTodo(string filter)
    {
        TodosFiltered = todoRepo.FilterTodo(filter).ToList();
    }

    private int RemaingTodos()
    {
        return todoRepo.CountRemainingTodos();
    }

    private void CheckAll()
    {
        todoRepo.CheckAll(checkAll);
        InitFilterTodos();
    }

    private void ClearCompleted()
    {
        todoRepo.ClearCompleted();
        InitFilterTodos();
    }


}