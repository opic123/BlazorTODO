@page "/"
@using BlazorTODO.Data
@using BlazorTODO.ViewModel
@using BlazorTODO.Services


<div class="card">
    <div class="card-header">
        BLAZOR TODO LIST with Syncfusion
    </div>
    <div class="card-body">

        <_AddNewTodo AddTodoHandler="@AddTodo"></_AddNewTodo>

        <br /><br />

        @if (Todos != null)
        {
            @foreach (var todo in Todos)
            {
                <_TodoItem todo="todo"
                           UpdateCompletedHandler="@UpdateCompleted"
                           UpdateTodoHandler="@UpdateTodo"
                           DeleteTodoHandler="@DeleteTodo">
                </_TodoItem>
            }
        }
        else
        {
            
        }



    </div>

    <div class="card-footer">
        <div class="row mb-4">
            <div class="col-sm-8">
                <EjsCheckBox Label="Check All" @bind-Checked="@checkAll" @onchange="CheckAll"></EjsCheckBox>
            </div>
            <div class="col-sm-4">
                <_RemaingTodosCount RemaingTodos="@RemaingTodos()"></_RemaingTodosCount>
            </div>
        </div>
        <hr />
        <div class="row mb-4">
            <div class="col-sm-8">
                <_FilterTodo FilterTodoHandler="@FilterTodo"></_FilterTodo>
            </div>

            @if ( Todos != null && RemaingTodos() < Todos.Count)
            {
                <div class="col-sm-4">
                    <_ClearCompletedTodo ClearCompletedHandler="@ClearCompleted"></_ClearCompletedTodo>
                </div>
            }

        </div>
    </div>

</div>


@code {
    TodoService todoService;
    private List<TodoViewModel> Todos;
    private List<TodoViewModel> TodosFiltered;

    private bool checkAll { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        ApiHelper.InitializeClient();
        todoService = new TodoService();
        Todos = (await todoService.LoadTodos()).ToList();
        checkAll = RemaingTodos() == 0 ? true : false;
    }


    private async Task AddTodo(string title)
    {
        if (!string.IsNullOrEmpty(title))
        {
            Todo newTodo = new Todo
            {
                Title = title
            };
            Todos.Add(await todoService.AddTodo(newTodo));
        }
    }

    private async Task DeleteTodo(TodoViewModel todo)
    {
        await todoService.DeleteTodo(todo);
        Todos.Remove(todo);
    }

    private async Task UpdateTodo(TodoViewModel todo)
    {
        if (!string.IsNullOrEmpty(todo.NewTitle))
        {
            todo.Title = todo.NewTitle;
            todo.Editing = false;
            await todoService.UpdateTodo(todo);
        }

    }

    private async Task UpdateCompleted(TodoViewModel todo)
    {
        await todoService.UpdateTodo(todo);
        checkAll = RemaingTodos() == 0 ? true : false;
    }

    private async Task FilterTodo(int completed)
    {
        if (completed == -1)
        {
            Todos = (await todoService.LoadTodos()).ToList();
        }
        else
        {
            var comp = completed == 1;
            Todos = (await todoService.FilterTodos(comp)).ToList();
        }
    }

    private int RemaingTodos()
    {
        if (Todos != null)
        {
            return Todos.Where(todo => !todo.Completed).ToList().Count();
        }
        return 0;
    }

    private async Task CheckAll()
    {
        Todos.ForEach(todo =>
        {
            todo.Completed = checkAll;
        });
        if (Todos.Count() > 0)
        {
            await todoService.CheckAll(Todos[0]);
        }

    }

    private async Task ClearCompleted()
    {
        await todoService.ClearCompleted();
        Todos = Todos.Where(todo => !todo.Completed).ToList();
    }


}
